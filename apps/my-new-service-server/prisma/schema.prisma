datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Candidate {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  firstName         String?
  email             String?
  resume            Json?
  lastName          String?
  skills            String?
  domainExpertise   String?
  yearsOfExperience Int?
}

model Recruiter {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String?
  lastName  String?
  email     String?
}

model Interview {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  date          DateTime?
  feedback      String?
  interviewer   String?
  candidate     String?
  jobPosition   JobPosition? @relation(fields: [jobPositionId], references: [id])
  jobPositionId String?
}

model JobPosition {
  id          String                 @id @default(cuid())
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  title       String?
  description String?
  status      EnumJobPositionStatus?
  interviews  Interview[]
}

model Message {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  content       String?
  senderId      String?
  interaction   Interaction? @relation(fields: [interactionId], references: [id])
  interactionId String?
}

model Interaction {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  interactionType String?
  timestamp       DateTime?
  voiceRecordings VoiceRecording[]
  messages        Message[]
}

model JobRequirement {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String?
  description String?
  createdBy   String?
  attachments Attachment[]
}

model Attachment {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  fileUrl          String?
  fileType         String?
  jobRequirement   JobRequirement? @relation(fields: [jobRequirementId], references: [id])
  jobRequirementId String?
}

model VoiceRecording {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  fileUrl       String?
  duration      Int?
  interaction   Interaction? @relation(fields: [interactionId], references: [id])
  interactionId String?
}

model CandidateScore {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  candidateId        String?
  score              Float?
  rankingAlgorithm   RankingAlgorithm? @relation(fields: [rankingAlgorithmId], references: [id])
  rankingAlgorithmId String?
}

model RankingAlgorithm {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String?
  description     String?
  candidateScores CandidateScore[]
}

model CandidateApplication {
  id          String                          @id @default(cuid())
  createdAt   DateTime                        @default(now())
  updatedAt   DateTime                        @updatedAt
  candidateId String?
  jobId       String?
  status      EnumCandidateApplicationStatus?
}

model Resume {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fileUrl    String?
  resumeText String?
}

enum EnumJobPositionStatus {
  Option1
}

enum EnumCandidateApplicationStatus {
  Option1
}

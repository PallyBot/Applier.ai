/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CandidateApplicationService } from "../candidateApplication.service";
import { CandidateApplicationCreateInput } from "./CandidateApplicationCreateInput";
import { CandidateApplication } from "./CandidateApplication";
import { CandidateApplicationFindManyArgs } from "./CandidateApplicationFindManyArgs";
import { CandidateApplicationWhereUniqueInput } from "./CandidateApplicationWhereUniqueInput";
import { CandidateApplicationUpdateInput } from "./CandidateApplicationUpdateInput";

export class CandidateApplicationControllerBase {
  constructor(protected readonly service: CandidateApplicationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CandidateApplication })
  @swagger.ApiBody({
    type: CandidateApplicationCreateInput,
  })
  async createCandidateApplication(
    @common.Body() data: CandidateApplicationCreateInput
  ): Promise<CandidateApplication> {
    return await this.service.createCandidateApplication({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        candidateId: true,
        jobId: true,
        status: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CandidateApplication] })
  @ApiNestedQuery(CandidateApplicationFindManyArgs)
  async candidateApplications(
    @common.Req() request: Request
  ): Promise<CandidateApplication[]> {
    const args = plainToClass(CandidateApplicationFindManyArgs, request.query);
    return this.service.candidateApplications({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        candidateId: true,
        jobId: true,
        status: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CandidateApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async candidateApplication(
    @common.Param() params: CandidateApplicationWhereUniqueInput
  ): Promise<CandidateApplication | null> {
    const result = await this.service.candidateApplication({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        candidateId: true,
        jobId: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CandidateApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: CandidateApplicationUpdateInput,
  })
  async updateCandidateApplication(
    @common.Param() params: CandidateApplicationWhereUniqueInput,
    @common.Body() data: CandidateApplicationUpdateInput
  ): Promise<CandidateApplication | null> {
    try {
      return await this.service.updateCandidateApplication({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          candidateId: true,
          jobId: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CandidateApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCandidateApplication(
    @common.Param() params: CandidateApplicationWhereUniqueInput
  ): Promise<CandidateApplication | null> {
    try {
      return await this.service.deleteCandidateApplication({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          candidateId: true,
          jobId: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

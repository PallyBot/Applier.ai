/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CandidateApplication } from "./CandidateApplication";
import { CandidateApplicationCountArgs } from "./CandidateApplicationCountArgs";
import { CandidateApplicationFindManyArgs } from "./CandidateApplicationFindManyArgs";
import { CandidateApplicationFindUniqueArgs } from "./CandidateApplicationFindUniqueArgs";
import { CreateCandidateApplicationArgs } from "./CreateCandidateApplicationArgs";
import { UpdateCandidateApplicationArgs } from "./UpdateCandidateApplicationArgs";
import { DeleteCandidateApplicationArgs } from "./DeleteCandidateApplicationArgs";
import { CandidateApplicationService } from "../candidateApplication.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CandidateApplication)
export class CandidateApplicationResolverBase {
  constructor(
    protected readonly service: CandidateApplicationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CandidateApplication",
    action: "read",
    possession: "any",
  })
  async _candidateApplicationsMeta(
    @graphql.Args() args: CandidateApplicationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CandidateApplication])
  @nestAccessControl.UseRoles({
    resource: "CandidateApplication",
    action: "read",
    possession: "any",
  })
  async candidateApplications(
    @graphql.Args() args: CandidateApplicationFindManyArgs
  ): Promise<CandidateApplication[]> {
    return this.service.candidateApplications(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CandidateApplication, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CandidateApplication",
    action: "read",
    possession: "own",
  })
  async candidateApplication(
    @graphql.Args() args: CandidateApplicationFindUniqueArgs
  ): Promise<CandidateApplication | null> {
    const result = await this.service.candidateApplication(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CandidateApplication)
  @nestAccessControl.UseRoles({
    resource: "CandidateApplication",
    action: "create",
    possession: "any",
  })
  async createCandidateApplication(
    @graphql.Args() args: CreateCandidateApplicationArgs
  ): Promise<CandidateApplication> {
    return await this.service.createCandidateApplication({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CandidateApplication)
  @nestAccessControl.UseRoles({
    resource: "CandidateApplication",
    action: "update",
    possession: "any",
  })
  async updateCandidateApplication(
    @graphql.Args() args: UpdateCandidateApplicationArgs
  ): Promise<CandidateApplication | null> {
    try {
      return await this.service.updateCandidateApplication({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CandidateApplication)
  @nestAccessControl.UseRoles({
    resource: "CandidateApplication",
    action: "delete",
    possession: "any",
  })
  async deleteCandidateApplication(
    @graphql.Args() args: DeleteCandidateApplicationArgs
  ): Promise<CandidateApplication | null> {
    try {
      return await this.service.deleteCandidateApplication(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

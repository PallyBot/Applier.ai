/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CandidateApplication as PrismaCandidateApplication,
} from "@prisma/client";

export class CandidateApplicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CandidateApplicationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.candidateApplication.count(args);
  }

  async candidateApplications(
    args: Prisma.CandidateApplicationFindManyArgs
  ): Promise<PrismaCandidateApplication[]> {
    return this.prisma.candidateApplication.findMany(args);
  }
  async candidateApplication(
    args: Prisma.CandidateApplicationFindUniqueArgs
  ): Promise<PrismaCandidateApplication | null> {
    return this.prisma.candidateApplication.findUnique(args);
  }
  async createCandidateApplication(
    args: Prisma.CandidateApplicationCreateArgs
  ): Promise<PrismaCandidateApplication> {
    return this.prisma.candidateApplication.create(args);
  }
  async updateCandidateApplication(
    args: Prisma.CandidateApplicationUpdateArgs
  ): Promise<PrismaCandidateApplication> {
    return this.prisma.candidateApplication.update(args);
  }
  async deleteCandidateApplication(
    args: Prisma.CandidateApplicationDeleteArgs
  ): Promise<PrismaCandidateApplication> {
    return this.prisma.candidateApplication.delete(args);
  }
}

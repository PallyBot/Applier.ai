/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CandidateScoreService } from "../candidateScore.service";
import { CandidateScoreCreateInput } from "./CandidateScoreCreateInput";
import { CandidateScore } from "./CandidateScore";
import { CandidateScoreFindManyArgs } from "./CandidateScoreFindManyArgs";
import { CandidateScoreWhereUniqueInput } from "./CandidateScoreWhereUniqueInput";
import { CandidateScoreUpdateInput } from "./CandidateScoreUpdateInput";

export class CandidateScoreControllerBase {
  constructor(protected readonly service: CandidateScoreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CandidateScore })
  @swagger.ApiBody({
    type: CandidateScoreCreateInput,
  })
  async createCandidateScore(
    @common.Body() data: CandidateScoreCreateInput
  ): Promise<CandidateScore> {
    return await this.service.createCandidateScore({
      data: {
        ...data,

        rankingAlgorithm: data.rankingAlgorithm
          ? {
              connect: data.rankingAlgorithm,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        candidateId: true,
        score: true,

        rankingAlgorithm: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CandidateScore] })
  @ApiNestedQuery(CandidateScoreFindManyArgs)
  async candidateScores(
    @common.Req() request: Request
  ): Promise<CandidateScore[]> {
    const args = plainToClass(CandidateScoreFindManyArgs, request.query);
    return this.service.candidateScores({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        candidateId: true,
        score: true,

        rankingAlgorithm: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CandidateScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async candidateScore(
    @common.Param() params: CandidateScoreWhereUniqueInput
  ): Promise<CandidateScore | null> {
    const result = await this.service.candidateScore({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        candidateId: true,
        score: true,

        rankingAlgorithm: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CandidateScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: CandidateScoreUpdateInput,
  })
  async updateCandidateScore(
    @common.Param() params: CandidateScoreWhereUniqueInput,
    @common.Body() data: CandidateScoreUpdateInput
  ): Promise<CandidateScore | null> {
    try {
      return await this.service.updateCandidateScore({
        where: params,
        data: {
          ...data,

          rankingAlgorithm: data.rankingAlgorithm
            ? {
                connect: data.rankingAlgorithm,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          candidateId: true,
          score: true,

          rankingAlgorithm: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CandidateScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCandidateScore(
    @common.Param() params: CandidateScoreWhereUniqueInput
  ): Promise<CandidateScore | null> {
    try {
      return await this.service.deleteCandidateScore({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          candidateId: true,
          score: true,

          rankingAlgorithm: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

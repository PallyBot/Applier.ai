/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CandidateScore } from "./CandidateScore";
import { CandidateScoreCountArgs } from "./CandidateScoreCountArgs";
import { CandidateScoreFindManyArgs } from "./CandidateScoreFindManyArgs";
import { CandidateScoreFindUniqueArgs } from "./CandidateScoreFindUniqueArgs";
import { CreateCandidateScoreArgs } from "./CreateCandidateScoreArgs";
import { UpdateCandidateScoreArgs } from "./UpdateCandidateScoreArgs";
import { DeleteCandidateScoreArgs } from "./DeleteCandidateScoreArgs";
import { RankingAlgorithm } from "../../rankingAlgorithm/base/RankingAlgorithm";
import { CandidateScoreService } from "../candidateScore.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CandidateScore)
export class CandidateScoreResolverBase {
  constructor(
    protected readonly service: CandidateScoreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CandidateScore",
    action: "read",
    possession: "any",
  })
  async _candidateScoresMeta(
    @graphql.Args() args: CandidateScoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CandidateScore])
  @nestAccessControl.UseRoles({
    resource: "CandidateScore",
    action: "read",
    possession: "any",
  })
  async candidateScores(
    @graphql.Args() args: CandidateScoreFindManyArgs
  ): Promise<CandidateScore[]> {
    return this.service.candidateScores(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CandidateScore, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CandidateScore",
    action: "read",
    possession: "own",
  })
  async candidateScore(
    @graphql.Args() args: CandidateScoreFindUniqueArgs
  ): Promise<CandidateScore | null> {
    const result = await this.service.candidateScore(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CandidateScore)
  @nestAccessControl.UseRoles({
    resource: "CandidateScore",
    action: "create",
    possession: "any",
  })
  async createCandidateScore(
    @graphql.Args() args: CreateCandidateScoreArgs
  ): Promise<CandidateScore> {
    return await this.service.createCandidateScore({
      ...args,
      data: {
        ...args.data,

        rankingAlgorithm: args.data.rankingAlgorithm
          ? {
              connect: args.data.rankingAlgorithm,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CandidateScore)
  @nestAccessControl.UseRoles({
    resource: "CandidateScore",
    action: "update",
    possession: "any",
  })
  async updateCandidateScore(
    @graphql.Args() args: UpdateCandidateScoreArgs
  ): Promise<CandidateScore | null> {
    try {
      return await this.service.updateCandidateScore({
        ...args,
        data: {
          ...args.data,

          rankingAlgorithm: args.data.rankingAlgorithm
            ? {
                connect: args.data.rankingAlgorithm,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CandidateScore)
  @nestAccessControl.UseRoles({
    resource: "CandidateScore",
    action: "delete",
    possession: "any",
  })
  async deleteCandidateScore(
    @graphql.Args() args: DeleteCandidateScoreArgs
  ): Promise<CandidateScore | null> {
    try {
      return await this.service.deleteCandidateScore(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => RankingAlgorithm, {
    nullable: true,
    name: "rankingAlgorithm",
  })
  @nestAccessControl.UseRoles({
    resource: "RankingAlgorithm",
    action: "read",
    possession: "any",
  })
  async getRankingAlgorithm(
    @graphql.Parent() parent: CandidateScore
  ): Promise<RankingAlgorithm | null> {
    const result = await this.service.getRankingAlgorithm(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

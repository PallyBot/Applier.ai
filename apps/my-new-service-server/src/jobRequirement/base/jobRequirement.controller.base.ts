/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { JobRequirementService } from "../jobRequirement.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { JobRequirementCreateInput } from "./JobRequirementCreateInput";
import { JobRequirement } from "./JobRequirement";
import { JobRequirementFindManyArgs } from "./JobRequirementFindManyArgs";
import { JobRequirementWhereUniqueInput } from "./JobRequirementWhereUniqueInput";
import { JobRequirementUpdateInput } from "./JobRequirementUpdateInput";
import { AttachmentFindManyArgs } from "../../attachment/base/AttachmentFindManyArgs";
import { Attachment } from "../../attachment/base/Attachment";
import { AttachmentWhereUniqueInput } from "../../attachment/base/AttachmentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class JobRequirementControllerBase {
  constructor(
    protected readonly service: JobRequirementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobRequirement })
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: JobRequirementCreateInput,
  })
  async createJobRequirement(
    @common.Body() data: JobRequirementCreateInput
  ): Promise<JobRequirement> {
    return await this.service.createJobRequirement({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        createdBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [JobRequirement] })
  @ApiNestedQuery(JobRequirementFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async jobRequirements(
    @common.Req() request: Request
  ): Promise<JobRequirement[]> {
    const args = plainToClass(JobRequirementFindManyArgs, request.query);
    return this.service.jobRequirements({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        createdBy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobRequirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async jobRequirement(
    @common.Param() params: JobRequirementWhereUniqueInput
  ): Promise<JobRequirement | null> {
    const result = await this.service.jobRequirement({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        createdBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobRequirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: JobRequirementUpdateInput,
  })
  async updateJobRequirement(
    @common.Param() params: JobRequirementWhereUniqueInput,
    @common.Body() data: JobRequirementUpdateInput
  ): Promise<JobRequirement | null> {
    try {
      return await this.service.updateJobRequirement({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          createdBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobRequirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteJobRequirement(
    @common.Param() params: JobRequirementWhereUniqueInput
  ): Promise<JobRequirement | null> {
    try {
      return await this.service.deleteJobRequirement({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          createdBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/attachments")
  @ApiNestedQuery(AttachmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Attachment",
    action: "read",
    possession: "any",
  })
  async findAttachments(
    @common.Req() request: Request,
    @common.Param() params: JobRequirementWhereUniqueInput
  ): Promise<Attachment[]> {
    const query = plainToClass(AttachmentFindManyArgs, request.query);
    const results = await this.service.findAttachments(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fileUrl: true,
        fileType: true,

        jobRequirement: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attachments")
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "update",
    possession: "any",
  })
  async connectAttachments(
    @common.Param() params: JobRequirementWhereUniqueInput,
    @common.Body() body: AttachmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attachments: {
        connect: body,
      },
    };
    await this.service.updateJobRequirement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attachments")
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "update",
    possession: "any",
  })
  async updateAttachments(
    @common.Param() params: JobRequirementWhereUniqueInput,
    @common.Body() body: AttachmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attachments: {
        set: body,
      },
    };
    await this.service.updateJobRequirement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attachments")
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "update",
    possession: "any",
  })
  async disconnectAttachments(
    @common.Param() params: JobRequirementWhereUniqueInput,
    @common.Body() body: AttachmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attachments: {
        disconnect: body,
      },
    };
    await this.service.updateJobRequirement({
      where: params,
      data,
      select: { id: true },
    });
  }
}

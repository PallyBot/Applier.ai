/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { JobRequirement } from "./JobRequirement";
import { JobRequirementCountArgs } from "./JobRequirementCountArgs";
import { JobRequirementFindManyArgs } from "./JobRequirementFindManyArgs";
import { JobRequirementFindUniqueArgs } from "./JobRequirementFindUniqueArgs";
import { CreateJobRequirementArgs } from "./CreateJobRequirementArgs";
import { UpdateJobRequirementArgs } from "./UpdateJobRequirementArgs";
import { DeleteJobRequirementArgs } from "./DeleteJobRequirementArgs";
import { AttachmentFindManyArgs } from "../../attachment/base/AttachmentFindManyArgs";
import { Attachment } from "../../attachment/base/Attachment";
import { JobRequirementService } from "../jobRequirement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => JobRequirement)
export class JobRequirementResolverBase {
  constructor(
    protected readonly service: JobRequirementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "read",
    possession: "any",
  })
  async _jobRequirementsMeta(
    @graphql.Args() args: JobRequirementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [JobRequirement])
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "read",
    possession: "any",
  })
  async jobRequirements(
    @graphql.Args() args: JobRequirementFindManyArgs
  ): Promise<JobRequirement[]> {
    return this.service.jobRequirements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => JobRequirement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "read",
    possession: "own",
  })
  async jobRequirement(
    @graphql.Args() args: JobRequirementFindUniqueArgs
  ): Promise<JobRequirement | null> {
    const result = await this.service.jobRequirement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobRequirement)
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "create",
    possession: "any",
  })
  async createJobRequirement(
    @graphql.Args() args: CreateJobRequirementArgs
  ): Promise<JobRequirement> {
    return await this.service.createJobRequirement({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobRequirement)
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "update",
    possession: "any",
  })
  async updateJobRequirement(
    @graphql.Args() args: UpdateJobRequirementArgs
  ): Promise<JobRequirement | null> {
    try {
      return await this.service.updateJobRequirement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobRequirement)
  @nestAccessControl.UseRoles({
    resource: "JobRequirement",
    action: "delete",
    possession: "any",
  })
  async deleteJobRequirement(
    @graphql.Args() args: DeleteJobRequirementArgs
  ): Promise<JobRequirement | null> {
    try {
      return await this.service.deleteJobRequirement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Attachment], { name: "attachments" })
  @nestAccessControl.UseRoles({
    resource: "Attachment",
    action: "read",
    possession: "any",
  })
  async findAttachments(
    @graphql.Parent() parent: JobRequirement,
    @graphql.Args() args: AttachmentFindManyArgs
  ): Promise<Attachment[]> {
    const results = await this.service.findAttachments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

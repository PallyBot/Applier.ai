/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  JobRequirement as PrismaJobRequirement,
  Attachment as PrismaAttachment,
} from "@prisma/client";

export class JobRequirementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.JobRequirementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.jobRequirement.count(args);
  }

  async jobRequirements(
    args: Prisma.JobRequirementFindManyArgs
  ): Promise<PrismaJobRequirement[]> {
    return this.prisma.jobRequirement.findMany(args);
  }
  async jobRequirement(
    args: Prisma.JobRequirementFindUniqueArgs
  ): Promise<PrismaJobRequirement | null> {
    return this.prisma.jobRequirement.findUnique(args);
  }
  async createJobRequirement(
    args: Prisma.JobRequirementCreateArgs
  ): Promise<PrismaJobRequirement> {
    return this.prisma.jobRequirement.create(args);
  }
  async updateJobRequirement(
    args: Prisma.JobRequirementUpdateArgs
  ): Promise<PrismaJobRequirement> {
    return this.prisma.jobRequirement.update(args);
  }
  async deleteJobRequirement(
    args: Prisma.JobRequirementDeleteArgs
  ): Promise<PrismaJobRequirement> {
    return this.prisma.jobRequirement.delete(args);
  }

  async findAttachments(
    parentId: string,
    args: Prisma.AttachmentFindManyArgs
  ): Promise<PrismaAttachment[]> {
    return this.prisma.jobRequirement
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attachments(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RankingAlgorithmService } from "../rankingAlgorithm.service";
import { RankingAlgorithmCreateInput } from "./RankingAlgorithmCreateInput";
import { RankingAlgorithm } from "./RankingAlgorithm";
import { RankingAlgorithmFindManyArgs } from "./RankingAlgorithmFindManyArgs";
import { RankingAlgorithmWhereUniqueInput } from "./RankingAlgorithmWhereUniqueInput";
import { RankingAlgorithmUpdateInput } from "./RankingAlgorithmUpdateInput";
import { CandidateScoreFindManyArgs } from "../../candidateScore/base/CandidateScoreFindManyArgs";
import { CandidateScore } from "../../candidateScore/base/CandidateScore";
import { CandidateScoreWhereUniqueInput } from "../../candidateScore/base/CandidateScoreWhereUniqueInput";

export class RankingAlgorithmControllerBase {
  constructor(protected readonly service: RankingAlgorithmService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RankingAlgorithm })
  @swagger.ApiBody({
    type: RankingAlgorithmCreateInput,
  })
  async createRankingAlgorithm(
    @common.Body() data: RankingAlgorithmCreateInput
  ): Promise<RankingAlgorithm> {
    return await this.service.createRankingAlgorithm({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RankingAlgorithm] })
  @ApiNestedQuery(RankingAlgorithmFindManyArgs)
  async rankingAlgorithms(
    @common.Req() request: Request
  ): Promise<RankingAlgorithm[]> {
    const args = plainToClass(RankingAlgorithmFindManyArgs, request.query);
    return this.service.rankingAlgorithms({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RankingAlgorithm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rankingAlgorithm(
    @common.Param() params: RankingAlgorithmWhereUniqueInput
  ): Promise<RankingAlgorithm | null> {
    const result = await this.service.rankingAlgorithm({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RankingAlgorithm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: RankingAlgorithmUpdateInput,
  })
  async updateRankingAlgorithm(
    @common.Param() params: RankingAlgorithmWhereUniqueInput,
    @common.Body() data: RankingAlgorithmUpdateInput
  ): Promise<RankingAlgorithm | null> {
    try {
      return await this.service.updateRankingAlgorithm({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RankingAlgorithm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRankingAlgorithm(
    @common.Param() params: RankingAlgorithmWhereUniqueInput
  ): Promise<RankingAlgorithm | null> {
    try {
      return await this.service.deleteRankingAlgorithm({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/candidateScores")
  @ApiNestedQuery(CandidateScoreFindManyArgs)
  async findCandidateScores(
    @common.Req() request: Request,
    @common.Param() params: RankingAlgorithmWhereUniqueInput
  ): Promise<CandidateScore[]> {
    const query = plainToClass(CandidateScoreFindManyArgs, request.query);
    const results = await this.service.findCandidateScores(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        candidateId: true,
        score: true,

        rankingAlgorithm: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateScores")
  async connectCandidateScores(
    @common.Param() params: RankingAlgorithmWhereUniqueInput,
    @common.Body() body: CandidateScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateScores: {
        connect: body,
      },
    };
    await this.service.updateRankingAlgorithm({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateScores")
  async updateCandidateScores(
    @common.Param() params: RankingAlgorithmWhereUniqueInput,
    @common.Body() body: CandidateScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateScores: {
        set: body,
      },
    };
    await this.service.updateRankingAlgorithm({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateScores")
  async disconnectCandidateScores(
    @common.Param() params: RankingAlgorithmWhereUniqueInput,
    @common.Body() body: CandidateScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateScores: {
        disconnect: body,
      },
    };
    await this.service.updateRankingAlgorithm({
      where: params,
      data,
      select: { id: true },
    });
  }
}

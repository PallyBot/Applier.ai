/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RankingAlgorithm } from "./RankingAlgorithm";
import { RankingAlgorithmCountArgs } from "./RankingAlgorithmCountArgs";
import { RankingAlgorithmFindManyArgs } from "./RankingAlgorithmFindManyArgs";
import { RankingAlgorithmFindUniqueArgs } from "./RankingAlgorithmFindUniqueArgs";
import { CreateRankingAlgorithmArgs } from "./CreateRankingAlgorithmArgs";
import { UpdateRankingAlgorithmArgs } from "./UpdateRankingAlgorithmArgs";
import { DeleteRankingAlgorithmArgs } from "./DeleteRankingAlgorithmArgs";
import { CandidateScoreFindManyArgs } from "../../candidateScore/base/CandidateScoreFindManyArgs";
import { CandidateScore } from "../../candidateScore/base/CandidateScore";
import { RankingAlgorithmService } from "../rankingAlgorithm.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RankingAlgorithm)
export class RankingAlgorithmResolverBase {
  constructor(
    protected readonly service: RankingAlgorithmService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RankingAlgorithm",
    action: "read",
    possession: "any",
  })
  async _rankingAlgorithmsMeta(
    @graphql.Args() args: RankingAlgorithmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RankingAlgorithm])
  @nestAccessControl.UseRoles({
    resource: "RankingAlgorithm",
    action: "read",
    possession: "any",
  })
  async rankingAlgorithms(
    @graphql.Args() args: RankingAlgorithmFindManyArgs
  ): Promise<RankingAlgorithm[]> {
    return this.service.rankingAlgorithms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RankingAlgorithm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RankingAlgorithm",
    action: "read",
    possession: "own",
  })
  async rankingAlgorithm(
    @graphql.Args() args: RankingAlgorithmFindUniqueArgs
  ): Promise<RankingAlgorithm | null> {
    const result = await this.service.rankingAlgorithm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RankingAlgorithm)
  @nestAccessControl.UseRoles({
    resource: "RankingAlgorithm",
    action: "create",
    possession: "any",
  })
  async createRankingAlgorithm(
    @graphql.Args() args: CreateRankingAlgorithmArgs
  ): Promise<RankingAlgorithm> {
    return await this.service.createRankingAlgorithm({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RankingAlgorithm)
  @nestAccessControl.UseRoles({
    resource: "RankingAlgorithm",
    action: "update",
    possession: "any",
  })
  async updateRankingAlgorithm(
    @graphql.Args() args: UpdateRankingAlgorithmArgs
  ): Promise<RankingAlgorithm | null> {
    try {
      return await this.service.updateRankingAlgorithm({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RankingAlgorithm)
  @nestAccessControl.UseRoles({
    resource: "RankingAlgorithm",
    action: "delete",
    possession: "any",
  })
  async deleteRankingAlgorithm(
    @graphql.Args() args: DeleteRankingAlgorithmArgs
  ): Promise<RankingAlgorithm | null> {
    try {
      return await this.service.deleteRankingAlgorithm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CandidateScore], { name: "candidateScores" })
  @nestAccessControl.UseRoles({
    resource: "CandidateScore",
    action: "read",
    possession: "any",
  })
  async findCandidateScores(
    @graphql.Parent() parent: RankingAlgorithm,
    @graphql.Args() args: CandidateScoreFindManyArgs
  ): Promise<CandidateScore[]> {
    const results = await this.service.findCandidateScores(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

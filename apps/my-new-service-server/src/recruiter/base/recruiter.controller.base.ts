/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecruiterService } from "../recruiter.service";
import { RecruiterCreateInput } from "./RecruiterCreateInput";
import { Recruiter } from "./Recruiter";
import { RecruiterFindManyArgs } from "./RecruiterFindManyArgs";
import { RecruiterWhereUniqueInput } from "./RecruiterWhereUniqueInput";
import { RecruiterUpdateInput } from "./RecruiterUpdateInput";

export class RecruiterControllerBase {
  constructor(protected readonly service: RecruiterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Recruiter })
  async createRecruiter(
    @common.Body() data: RecruiterCreateInput
  ): Promise<Recruiter> {
    return await this.service.createRecruiter({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        email: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Recruiter] })
  @ApiNestedQuery(RecruiterFindManyArgs)
  async recruiters(@common.Req() request: Request): Promise<Recruiter[]> {
    const args = plainToClass(RecruiterFindManyArgs, request.query);
    return this.service.recruiters({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        email: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Recruiter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recruiter(
    @common.Param() params: RecruiterWhereUniqueInput
  ): Promise<Recruiter | null> {
    const result = await this.service.recruiter({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        email: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Recruiter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecruiter(
    @common.Param() params: RecruiterWhereUniqueInput,
    @common.Body() data: RecruiterUpdateInput
  ): Promise<Recruiter | null> {
    try {
      return await this.service.updateRecruiter({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          email: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Recruiter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecruiter(
    @common.Param() params: RecruiterWhereUniqueInput
  ): Promise<Recruiter | null> {
    try {
      return await this.service.deleteRecruiter({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          email: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VoiceRecording } from "./VoiceRecording";
import { VoiceRecordingCountArgs } from "./VoiceRecordingCountArgs";
import { VoiceRecordingFindManyArgs } from "./VoiceRecordingFindManyArgs";
import { VoiceRecordingFindUniqueArgs } from "./VoiceRecordingFindUniqueArgs";
import { CreateVoiceRecordingArgs } from "./CreateVoiceRecordingArgs";
import { UpdateVoiceRecordingArgs } from "./UpdateVoiceRecordingArgs";
import { DeleteVoiceRecordingArgs } from "./DeleteVoiceRecordingArgs";
import { Interaction } from "../../interaction/base/Interaction";
import { VoiceRecordingService } from "../voiceRecording.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VoiceRecording)
export class VoiceRecordingResolverBase {
  constructor(
    protected readonly service: VoiceRecordingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VoiceRecording",
    action: "read",
    possession: "any",
  })
  async _voiceRecordingsMeta(
    @graphql.Args() args: VoiceRecordingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VoiceRecording])
  @nestAccessControl.UseRoles({
    resource: "VoiceRecording",
    action: "read",
    possession: "any",
  })
  async voiceRecordings(
    @graphql.Args() args: VoiceRecordingFindManyArgs
  ): Promise<VoiceRecording[]> {
    return this.service.voiceRecordings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VoiceRecording, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VoiceRecording",
    action: "read",
    possession: "own",
  })
  async voiceRecording(
    @graphql.Args() args: VoiceRecordingFindUniqueArgs
  ): Promise<VoiceRecording | null> {
    const result = await this.service.voiceRecording(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VoiceRecording)
  @nestAccessControl.UseRoles({
    resource: "VoiceRecording",
    action: "create",
    possession: "any",
  })
  async createVoiceRecording(
    @graphql.Args() args: CreateVoiceRecordingArgs
  ): Promise<VoiceRecording> {
    return await this.service.createVoiceRecording({
      ...args,
      data: {
        ...args.data,

        interaction: args.data.interaction
          ? {
              connect: args.data.interaction,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VoiceRecording)
  @nestAccessControl.UseRoles({
    resource: "VoiceRecording",
    action: "update",
    possession: "any",
  })
  async updateVoiceRecording(
    @graphql.Args() args: UpdateVoiceRecordingArgs
  ): Promise<VoiceRecording | null> {
    try {
      return await this.service.updateVoiceRecording({
        ...args,
        data: {
          ...args.data,

          interaction: args.data.interaction
            ? {
                connect: args.data.interaction,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VoiceRecording)
  @nestAccessControl.UseRoles({
    resource: "VoiceRecording",
    action: "delete",
    possession: "any",
  })
  async deleteVoiceRecording(
    @graphql.Args() args: DeleteVoiceRecordingArgs
  ): Promise<VoiceRecording | null> {
    try {
      return await this.service.deleteVoiceRecording(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Interaction, {
    nullable: true,
    name: "interaction",
  })
  @nestAccessControl.UseRoles({
    resource: "Interaction",
    action: "read",
    possession: "any",
  })
  async getInteraction(
    @graphql.Parent() parent: VoiceRecording
  ): Promise<Interaction | null> {
    const result = await this.service.getInteraction(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
